// ASTI.K ‚Äî Telegram-–±–æ—Ç —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ò–ò (Telegraf + OpenAI). –ì–æ—Ç–æ–≤ –¥–ª—è Render.
const { Telegraf, Markup } = require("telegraf");
const express = require("express");
const OpenAI = require("openai");

// === ENV ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const OPENAI_MODEL = process.env.OPENAI_MODEL || "gpt-4o-mini";

if (!BOT_TOKEN || !OPENAI_API_KEY) {
  console.error("ENV missing: BOT_TOKEN or OPENAI_API_KEY");
  process.exit(1);
}

// === INIT ===
const bot = new Telegraf(BOT_TOKEN);
const app = express();
const ai = new OpenAI({ apiKey: OPENAI_API_KEY });

// –ü—Ä–æ—Å—Ç–µ–π—à–∞—è ¬´–ø–∞–º—è—Ç—å¬ª —à–∞–≥–æ–≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
const S = {};
const getS = (id) => (S[id] ??= { mode: null, step: 0, data: {} });
const reset = (id) => (S[id] = { mode: null, step: 0, data: {} });

// –ó–∞–ø—Ä–æ—Å –∫ –ò–ò
async function askAI(userMsg, sys = "") {
  try {
    const r = await ai.chat.completions.create({
      model: OPENAI_MODEL,
      temperature: 0.7,
      max_tokens: 700,
      messages: [
        {
          role: "system",
          content:
            (sys || "") +
            "\n–¢—ã ‚Äî ASTI.K, –¥–µ—Ä–∑–∫–∏–π —á–µ—Å—Ç–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç –ø–æ–∫–æ–ª–µ–Ω–∏—è Z. " +
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –±–µ–∑ –ª–µ—Å—Ç–∏ –∏ –≤–æ–¥—ã. " +
            "–£–ø–æ—Ä: —Ñ–∏–≥—É—Ä–∞/—Å–∏–ª—É—ç—Ç, —Ü–µ–ª–∏, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è —Å—Ç–∏–ª—è, —Ç–∫–∞–Ω–∏/—Ñ–∞–∫—Ç—É—Ä—ã, —Ñ–æ—Ä–º—É–ª—ã –æ–±—Ä–∞–∑–æ–≤, –∞–Ω—Ç–∏-—Å–æ–≤–µ—Ç—ã. " +
            "–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è HTML: <b>, <i>, —Å–ø–∏—Å–∫–∏."
        },
        { role: "user", content: userMsg }
      ]
    });
    return r.choices?.[0]?.message?.content?.trim() || "‚Ä¶";
  } catch (e) {
    console.error("AI error:", e?.message || e);
    return "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞ —É –ò–ò. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.";
  }
}

// === keep-alive –¥–ª—è Render (–∏ —Å—Ç—Ä–∞–Ω–∏—á–∫–∞ ¬´–∂–∏–≤—É¬ª) ===
app.get("/", (_, res) => res.send("ASTI.K is live"));
app.listen(process.env.PORT || 10000, () => console.log("Server running"));

// === /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ ===
bot.start(async (ctx) => {
  reset(ctx.from.id);
  await ctx.replyWithHTML(
    "üö® <b>–°—Ç–æ–ø. –¢—ã –≤ –∑–æ–Ω–µ ASTI.K.</b>\n" +
      "–ó–¥–µ—Å—å –Ω–µ—Ç —Ñ–∞–ª—å—à–∏–≤—ã—Ö –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–æ–≤ –∏ —Ä–æ–∑–æ–≤—ã—Ö —Å–æ–ø–ª–µ–π.\n\n" +
      "–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π:\n" +
      "üí£ –†–∞–∑–Ω–µ—Å—ë—Ç —Ç–≤–æ–∏ –º–æ–¥–Ω—ã–µ –∏–ª–ª—é–∑–∏–∏.\n" +
      "ü©∏ –ü–æ–∫–∞–∂–µ—Ç, –ø–æ—á–µ–º—É –≤–µ—â–∏ –º–æ–≥—É—Ç ¬´—Å—Ç–∞—Ä–∏—Ç—å¬ª –∏–ª–∏ ¬´–¥–µ—à–µ–≤–∏—Ç—å¬ª.\n" +
      "‚ö° –°–∫–∞–∂–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤—ã–≥–ª—è–¥–µ—Ç—å –¥–æ—Ä–æ–∂–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–µ–µ.\n\n" +
      "üß© –ù–∞—á–Ω—ë–º —Å <b>–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–∏–≥—É—Ä—ã</b> ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π —á–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–±–æ—Ä.\n\n" +
      "üëâ –ì–æ—Ç–æ–≤–∞ –∫ –∑–µ—Ä–∫–∞–ª—É?",
    Markup.inlineKeyboard([[Markup.button.callback("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", "diag_start")]])
  );
});

// === –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (3 —à–∞–≥–∞) ===
bot.action("diag_start", async (ctx) => {
  const st = getS(ctx.from.id);
  st.mode = "diag";
  st.step = 1;
  st.data = {};
  await ctx.answerCbQuery();
  await ctx.reply("1/3 üëâ –ù–∞–ø–∏—à–∏: <b>—Ä–æ—Å—Ç</b> (—Å–º) –∏ <b>–≤–µ—Å</b> (–∫–≥). –ü—Ä–∏–º–µ—Ä: 168 / 62", { parse_mode: "HTML" });
});

bot.on("text", async (ctx) => {
  const st = getS(ctx.from.id);
  const t = (ctx.message.text || "").trim();

  if (st.mode === "diag") {
    if (st.step === 1) {
      st.data.height_weight = t;
      st.step = 2;
      return ctx.reply("2/3 üëâ –¢–≤–æ–π <b>—Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã</b> (–≤–µ—Ä—Ö/–Ω–∏–∑, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è). –ü—Ä–∏–º–µ—Ä: 44-46 / 46", { parse_mode: "HTML" });
    }

    if (st.step === 2) {
      st.data.size = t;
      st.step = 3;
      return ctx.reply(
        "3/3 üëâ –ö—É–¥–∞ —á–∞—â–µ –≤—Å–µ–≥–æ –Ω—É–∂–Ω—ã –æ–±—Ä–∞–∑—ã? (–æ—Ñ–∏—Å / —Å–≤–∏–¥–∞–Ω–∏—è / –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ / –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è). –ò –∫–∞–∫–æ–π –≤–∞–π–±? (–º–∏–Ω–∏–º–∞–ª–∏–∑–º / –¥–µ—Ä–∑–∫–æ / –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ / —Å–ø–æ—Ä—Ç-—à–∏–∫)."
      );
    }

    if (st.step === 3) {
      st.data.context_vibe = t;

      const prompt = `
–°–æ–±–µ—Ä–∏ —á–µ—Å—Ç–Ω–æ–µ —Ä–µ–∑—é–º–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–∏–≥—É—Ä—ã –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
–î–∞–Ω–æ:
- —Ä–æ—Å—Ç/–≤–µ—Å: ${st.data.height_weight}
- —Ä–∞–∑–º–µ—Ä: ${st.data.size}
- –∫–æ–Ω—Ç–µ–∫—Å—Ç/–≤–∞–π–±: ${st.data.context_vibe}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (HTML):
<b>–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã</b> ‚Äî 3 –ø—É–Ω–∫—Ç–∞
<b>–†–∏—Å–∫-–∑–æ–Ω—ã –∏ –∫–∞–∫ –Ω–µ–π—Ç—Ä–∞–ª–∏–∑–æ–≤–∞—Ç—å</b> ‚Äî 3 –ø—É–Ω–∫—Ç–∞
<b>–ë—ã—Å—Ç—Ä—ã–µ —Ñ–æ—Ä–º—É–ª—ã –æ–±—Ä–∞–∑–æ–≤</b> ‚Äî 3 —à—Ç—É–∫–∏
<b>–ê–Ω—Ç–∏-—Å–æ–≤–µ—Ç—ã</b> ‚Äî 2 —à—Ç—É–∫–∏
–ö–æ—Ä–æ—Ç–∫–æ, –ø–æ –¥–µ–ª—É.`;

      const aiText = await askAI(prompt);
      reset(ctx.from.id);

      await ctx.replyWithHTML(aiText);
      await ctx.reply(
        "–ü—Ä–æ–¥–æ–ª–∂–∏–º?",
        Markup.inlineKeyboard([
          [Markup.button.

callback("üëó –ú–∏–Ω–∏-–∫–∞–ø—Å—É–ª–∞", "capsule_start")],
          [Markup.button.callback("üí° –°–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é", "advice_start")]
        ])
      );
      return;
    }
  }

  // –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å –≤ –ò–ò
  const reply = await askAI(t);
  return ctx.replyWithHTML(reply);
});

// –ó–∞–≥–ª—É—à–∫–∏ –Ω–∞ –±—É–¥—É—â–∏–µ –≤–µ—Ç–∫–∏ (—á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –∫—Ä–∞—Å–∏–≤–æ)
bot.action("capsule_start", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("–û–∫, –º–∏–Ω–∏-–∫–∞–ø—Å—É–ª–∞. –ù–∞–ø–∏—à–∏: —Ü–µ–ª–∏, –±—é–¥–∂–µ—Ç –∏ –¥—Ä–µ—Å—Å–∫–æ–¥. –Ø –ø—Ä–µ–¥–ª–æ–∂—É –±—ã—Å—Ç—Ä—ã–π –ø–ª–∞–Ω.");
});
bot.action("advice_start", async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply("–ó–∞–¥–∞–π –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Å—Ç–∏–ª—é ‚Äî –æ—Ç–≤–µ—á—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –±–µ–∑ –≤–æ–¥—ã.");
});

// === –ó–∞–ø—É—Å–∫ long-polling ===
bot.launch();
console.log("ASTI.K bot started");
