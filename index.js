const { Telegraf, Markup } = require('telegraf');
const express = require('express');

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();

// /start ‚Äî –Ω–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –∫–Ω–æ–ø–∫–∏
bot.start(async (ctx) => {
  await ctx.replyWithHTML(
    '<b>‚ú® –¢—ã –ø—Ä–∏—à–ª–∞ –≤–æ–≤—Ä–µ–º—è. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ASTI.</b>\n\n' +
    '<i>–≠—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Å—Ç–∏–ª—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º, –∞ –∫–∞–∂–¥–∞—è –¥–µ—Ç–∞–ª—å ‚Äì —á–∞—Å—Ç—å—é —Ç–≤–æ–µ–π —Å–∏–ª—ã.</i>\n\n' +
    '–í—ã–±–µ—Ä–∏, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º üëá',
    Markup.inlineKeyboard([
      [Markup.button.callback('üîÆ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', 'diagnostic')],
      [Markup.button.callback('üëó –ú–∏–Ω–∏-–∫–∞–ø—Å—É–ª–∞', 'capsule')],
      [Markup.button.callback('üí° –°–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é', 'advice')]
    ])
  );
});

// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã)
bot.action('diagnostic', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('–û–∫. –ù–∞—á–Ω—ë–º –º–∏–Ω–∏-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –≤–∫—É—Å–∞ –∏ —Å–∏–ª—É—ç—Ç–∞. –ù–∞–ø–∏—à–∏, –∫—É–¥–∞ —Ç—ã —á–∞—â–µ –≤—Å–µ–≥–æ —Ö–æ–¥–∏—à—å (–æ—Ñ–∏—Å/–≤—Å—Ç—Ä–µ—á–∏/—Å–≤–∏–¥–∞–Ω–∏—è)‚Ä¶');
});

bot.action('capsule', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('–°—É–ø–µ—Ä! –°–æ–±–µ—Ä—É –º–∏–Ω–∏-–∫–∞–ø—Å—É–ª—É. –ù–∞–ø–∏—à–∏, –∫–∞–∫–æ–π —É —Ç–µ–±—è –¥—Ä–µ—Å—Å-–∫–æ–¥/—Å—Ç–∏–ª—å –∏ –±—é–¥–∂–µ—Ç.');
});

bot.action('advice', async (ctx) => {
  await ctx.answerCbQuery();
  await ctx.reply('–ó–∞–¥–∞–π –ª—é–±–æ–π —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –ø–æ–º–æ–≥—É ‚ú®');
});

// keep-alive –¥–ª—è Render
app.get('/', (_, res) => res.send('ASTI Bot is running!'));
app.listen(process.env.PORT || 3000, () => console.log('Server is running...'));

bot.launch();
